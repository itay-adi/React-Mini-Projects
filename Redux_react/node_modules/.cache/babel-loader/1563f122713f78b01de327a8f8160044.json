{"ast":null,"code":"//import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst initialAuthState = {\n  isAuth: false\n};\nconst AuthSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuth = true;\n    },\n\n    logout(state) {\n      state.isAuth = false;\n    }\n\n  }\n}); //Here we create a store\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store; //Here we create the reducer function, params are defalut\n\n/*const counterReducer = (state = initialState, action) => {\r\n    if(action.type === 'increment'){\r\n        return ({\r\n            ...state,\r\n            counter: state.counter + 1,\r\n            //showCounter: state.showCounter\r\n        });\r\n    }\r\n\r\n    if(action.type === 'increase'){\r\n        return ({\r\n            ...state,\r\n            counter: state.counter + action.amount,\r\n            //showCounter: state.showCounter\r\n        });\r\n    }\r\n\r\n    if(action.type === 'decrement'){\r\n        return ({\r\n            ...state,\r\n            counter: state.counter - 1,\r\n            //showCounter: state.showCounter\r\n        });\r\n    }\r\n\r\n    if(action.type === 'toggle'){\r\n        return ({\r\n            ...state,\r\n            //counter: state.counter,\r\n            showCounter: !state.showCounter\r\n        });\r\n    }\r\n\r\n    return state;\r\n}*/\n//Here we create a store\n\n/*const store = createStore(counterReducer);\r\n\r\nexport default store;*/","map":{"version":3,"sources":["C:/Users/איתי עדי יוסף/פיתוח/Amdocs/React- Tha Complete Guide/React-Mini-Projects/Redux_react/src/store/index.js"],"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuth","AuthSlice","login","logout","store","reducer","counterActions","actions"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC7BM,EAAAA,IAAI,EAAE,SADuB;AAE7BC,EAAAA,YAAY,EAAEL,mBAFe;AAG7BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACP,OAAN;AACH,KAHK;;AAKNQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACP,OAAN;AACH,KAPK;;AASNS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACpBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC;AACH,KAXK;;AAaNC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACH;;AAfK;AAHmB,CAAD,CAAhC;AAsBA,MAAMY,gBAAgB,GAAG;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAzB;AAEA,MAAMC,SAAS,GAAGlB,WAAW,CAAC;AAC1BM,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAES,gBAFY;AAG1BR,EAAAA,QAAQ,EAAE;AACNW,IAAAA,KAAK,CAACT,KAAD,EAAO;AACRA,MAAAA,KAAK,CAACO,MAAN,GAAe,IAAf;AACH,KAHK;;AAING,IAAAA,MAAM,CAACV,KAAD,EAAO;AACTA,MAAAA,KAAK,CAACO,MAAN,GAAe,KAAf;AACH;;AANK;AAHgB,CAAD,CAA7B,C,CAaA;;AACA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;AACzBqB,EAAAA,OAAO,EAAEjB,YAAY,CAACiB;AADG,CAAD,CAA5B;AAIA,OAAO,MAAMC,cAAc,GAAGlB,YAAY,CAACmB,OAApC;AACP,eAAeH,KAAf,C,CAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA","sourcesContent":["//import { createStore } from 'redux';\r\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\n\r\nconst counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: initialCounterState,\r\n    reducers: {\r\n        increment(state) {\r\n            state.counter++;\r\n        },\r\n\r\n        decrement(state) {\r\n            state.counter--;\r\n        },\r\n\r\n        increase(state, action) {\r\n            state.counter = state.counter + action.payload;\r\n        },\r\n\r\n        toggleCounter(state) {\r\n            state.showCounter = !state.showCounter;\r\n        }\r\n    }\r\n});\r\n\r\nconst initialAuthState = { isAuth: false};\r\n\r\nconst AuthSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialAuthState,\r\n    reducers: {\r\n        login(state){\r\n            state.isAuth = true;\r\n        },\r\n        logout(state){\r\n            state.isAuth = false;\r\n        }\r\n    }\r\n});\r\n\r\n//Here we create a store\r\nconst store = configureStore({\r\n    reducer: counterSlice.reducer\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport default store;\r\n\r\n//Here we create the reducer function, params are defalut\r\n/*const counterReducer = (state = initialState, action) => {\r\n    if(action.type === 'increment'){\r\n        return ({\r\n            ...state,\r\n            counter: state.counter + 1,\r\n            //showCounter: state.showCounter\r\n        });\r\n    }\r\n\r\n    if(action.type === 'increase'){\r\n        return ({\r\n            ...state,\r\n            counter: state.counter + action.amount,\r\n            //showCounter: state.showCounter\r\n        });\r\n    }\r\n\r\n    if(action.type === 'decrement'){\r\n        return ({\r\n            ...state,\r\n            counter: state.counter - 1,\r\n            //showCounter: state.showCounter\r\n        });\r\n    }\r\n\r\n    if(action.type === 'toggle'){\r\n        return ({\r\n            ...state,\r\n            //counter: state.counter,\r\n            showCounter: !state.showCounter\r\n        });\r\n    }\r\n\r\n    return state;\r\n}*/\r\n\r\n//Here we create a store\r\n/*const store = createStore(counterReducer);\r\n\r\nexport default store;*/"]},"metadata":{},"sourceType":"module"}